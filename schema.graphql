type AccessibilityInformation {
  description: String
  id: ID
  types: String
  urls: [WebUrl!]
}

input AccessibilityInformationInput {
  description: String
  types: String
  urls: [WebUrlInput!]
}

type Address {
  addition: String
  city: String
  geoLocation: GeoLocation
  id: ID
  kind: String
  street: String
  wasteLocationTypes: [WasteLocationType!]
  zip: String
}

input AddressInput {
  addition: String
  city: String
  geoLocation: GeoLocationInput
  id: Int
  kind: String
  street: String
  zip: String
}

scalar AnyPrimitive

type AppUserContent {
  content: String
  createdAt: String
  dataSource: String
  dataType: String
  id: ID
  updatedAt: String
}

type Category {
  eventRecords: [EventRecord!]
  eventRecordsCount: Int
  genericItemsCount: Int
  id: ID
  name: String
  newsItems: [NewsItem!]
  newsItemsCount: Int
  pointsOfInterest: [PointOfInterest!]
  pointsOfInterestCount: Int
  tours: [Tour!]
  toursCount: Int
  upcomingEventRecords: [EventRecord!]
  upcomingEventRecordsCount: Int
}

input CategoryInput {
  name: String
}

type Certificate {
  id: ID
  name: String
}

input CertificateInput {
  name: String
}

type Contact {
  email: String
  fax: String
  firstName: String
  id: ID
  lastName: String
  phone: String
  webUrls: [WebUrl!]
}

input ContactInput {
  email: String
  fax: String
  firstName: String
  lastName: String
  phone: String
  webUrls: [WebUrlInput!]
}

type ContentBlock {
  body: String
  createdAt: String
  id: ID
  intro: String
  mediaContents: [MediaContent!]
  title: String
  updatedAt: String
}

input ContentBlockInput {
  body: String
  intro: String
  mediaContents: [MediaContentInput!]
  title: String
}

type DataProvider {
  address: Address
  contact: Contact
  dataType: String
  description: String
  id: ID
  logo: WebUrl
  name: String
  notice: String
}

type Date {
  dateEnd: String
  dateStart: String
  id: ID
  timeDescription: String
  timeEnd: String
  timeStart: String
  useOnlyTimeDescription: String
  weekday: String
}

input DateInput {
  dateEnd: String
  dateStart: String
  timeDescription: String
  timeEnd: String
  timeStart: String
  useOnlyTimeDescription: Boolean
  weekday: String
}

type Destroy {
  id: Int
  status: String
  statusCode: Int
}

type EventRecord {
  accessibilityInformation: AccessibilityInformation
  addresses: [Address!]
  categories: [Category!]
  category: Category
  contacts: [Contact!]
  createdAt: String
  dataProvider: DataProvider
  dates: [Date!]
  description: String
  externalId: String
  id: ID
  listDate: String
  location: Location
  mediaContents: [MediaContent!]
  organizer: OperatingCompany
  parentId: Int
  priceInformations: [Price!]
  region: Region
  regionId: String
  repeat: Boolean
  repeatDuration: RepeatDuration
  settings: Setting
  tagList: [String!]
  title: String
  updatedAt: String
  urls: [WebUrl!]
  visible: Boolean
}

enum EventRecordsOrder {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  listDate_ASC
  listDate_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GenericItem {
  accessibilityInformations: [AccessibilityInformation!]
  addresses: [Address!]
  author: String
  categories: [Category!]
  companies: [OperatingCompany!]
  contacts: [Contact!]
  contentBlocks: [ContentBlock!]
  createdAt: String
  dataProvider: DataProvider
  dates: [Date!]
  externalId: String
  genericItems: [GenericItem!]
  genericType: String
  id: ID
  locations: [Location!]
  mediaContents: [MediaContent!]
  openingHours: [OpeningHour!]
  payload: JSON
  priceInformations: [Price!]
  publicationDate: String
  publishedAt: String
  settings: Setting
  title: String
  updatedAt: String
  visible: Boolean
  webUrls: [WebUrl!]
}

input GenericItemInput {
  accessibilityInformations: [AccessibilityInformationInput!]
  addresses: [AddressInput!]
  author: String
  categories: [CategoryInput!]
  categoryName: String
  companies: [OperatingCompanyInput!]
  contacts: [ContactInput!]
  contentBlocks: [ContentBlockInput!]
  dates: [DateInput!]
  externalId: String
  forceCreate: Boolean
  genericItems: [GenericItemInput!]
  genericType: String
  locations: [LocationInput!]
  mediaContents: [MediaContentInput!]
  openingHours: [OpeningHourInput!]
  payload: JSON
  priceInformations: [PriceInput!]
  publicationDate: String
  publishedAt: String
  pushNotification: Boolean
  title: String
  webUrls: [WebUrlInput!]
}

enum GenericItemOrder {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  publicationDate_ASC
  publicationDate_DESC
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GeoLocation {
  id: ID
  latitude: Float
  longitude: Float
}

input GeoLocationInput {
  latitude: AnyPrimitive
  longitude: AnyPrimitive
}

"""
      A specific JSON type representing I18n
      text data, for example:
      ```
      {
        de: "deutscher Text",
        en: "englischer Text"
      }
      ```
"""
scalar I18nJSON

"""
Represents untyped JSON
"""
scalar JSON

type Location {
  department: String
  district: String
  geoLocation: GeoLocation
  id: ID
  name: String
  regionName: String
  state: String
}

input LocationInput {
  department: String
  district: String
  geoLocation: GeoLocationInput
  name: String
  regionName: String
  state: String
}

type Lunch {
  createdAt: String
  dates: [Date!]
  id: ID
  listDate: String
  lunchOffers: [LunchOffer!]
  pointOfInterest: PointOfInterest!
  pointOfInterestAttributes: String
  text: String
  updatedAt: String
}

input LunchInput {
  dates: [DateInput!]
  lunchOffers: [LunchOfferInput!]
  pointOfInterestAttributes: String
  pointOfInterestId: ID
  text: String
}

type LunchOffer {
  createdAt: String
  id: ID
  name: String
  price: String
  updatedAt: String
}

input LunchOfferInput {
  name: String
  price: String
}

enum LunchesOrder {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MediaContent {
  captionText: String
  contentType: String
  copyright: String
  height: Int
  id: ID
  sourceUrl: WebUrl
  width: Int
}

input MediaContentInput {
  captionText: String
  contentType: String
  copyright: String
  height: AnyPrimitive
  sourceUrl: WebUrlInput
  width: AnyPrimitive
}

type Mutation {
  changeVisibility(id: ID!, recordType: String!, visible: Boolean!): Status!
  commentSurvey(message: String!, surveyId: ID!): Status!
  createAppUserContent(content: String, dataSource: String, dataType: String): AppUserContent!
  createEventRecord(accessibilityInformation: AccessibilityInformationInput, addresses: [AddressInput!], categories: [CategoryInput!], categoryName: String, contacts: [ContactInput!], dates: [DateInput!], description: String, externalId: String, forceCreate: Boolean, location: LocationInput, mediaContents: [MediaContentInput!], organizer: OperatingCompanyInput, parentId: Int, priceInformations: [PriceInput!], region: RegionInput, regionName: String, repeat: Boolean, repeatDuration: RepeatDurationInput, tags: [String!], title: String, urls: [WebUrlInput!]): EventRecord!
  createGenericItem(accessibilityInformations: [AccessibilityInformationInput!], addresses: [AddressInput!], author: String, categories: [CategoryInput!], categoryName: String, companies: [OperatingCompanyInput!], contacts: [ContactInput!], contentBlocks: [ContentBlockInput!], dates: [DateInput!], externalId: String, forceCreate: Boolean, genericItems: [GenericItemInput!], genericType: String, locations: [LocationInput!], mediaContents: [MediaContentInput!], openingHours: [OpeningHourInput!], payload: JSON, priceInformations: [PriceInput!], publicationDate: String, publishedAt: String, pushNotification: Boolean, title: String, webUrls: [WebUrlInput!]): GenericItem!
  createNewsItem(address: AddressInput, author: String, categories: [CategoryInput!], categoryName: String, charactersToBeShown: Int, contentBlocks: [ContentBlockInput!], externalId: String, forceCreate: Boolean, fullVersion: Boolean, newsType: String, publicationDate: String, publishedAt: String, pushNotification: Boolean, showPublishDate: Boolean, sourceUrl: WebUrlInput, title: String): NewsItem!
  createOrUpdateSurveyPoll(canComment: Boolean, date: DateInput, description: I18nJSON, forceCreate: Boolean, id: ID, isMultilingual: Boolean, questionAllowMultipleResponses: I18nJSON, questionId: ID, questionTitle: I18nJSON!, responseOptions: [JSON!]!, title: I18nJSON): SurveyPoll!
  createPointOfInterest(accessibilityInformation: AccessibilityInformationInput, active: Boolean, addresses: [AddressInput!], categories: [CategoryInput!], categoryName: String, certificates: [CertificateInput!], contact: ContactInput, description: String, forceCreate: Boolean, location: LocationInput, lunches: [LunchInput!], mediaContents: [MediaContentInput!], mobileDescription: String, name: String!, openingHours: [OpeningHourInput!], operatingCompany: OperatingCompanyInput, priceInformations: [PriceInput!], tags: [String!], webUrls: [WebUrlInput!]): PointOfInterest!
  createTour(accessibilityInformation: AccessibilityInformationInput, active: Boolean, addresses: [AddressInput!], categories: [CategoryInput!], categoryName: String, certificates: [CertificateInput!], contact: ContactInput, description: String, forceCreate: Boolean, geometryTourData: [GeoLocationInput!], lengthKm: Int!, location: LocationInput, meansOfTransportation: String, mediaContents: [MediaContentInput!], mobileDescription: String, name: String!, operatingCompany: OperatingCompanyInput, tags: [String!], webUrls: [WebUrlInput!]): Tour!
  createWastePickUpTime(pickupDate: String!, wasteLocationType: WasteLocationTypeInput, wasteLocationTypeId: Int): WastePickUpTime!
  destroyRecord(externalId: Int, id: Int, recordType: String!): Destroy!

  """
  `voteForSurvey` is deprecated. Use `votesForSurvey` instead.
  """
  voteForSurvey(decreaseId: ID, increaseId: ID): Status! @deprecated(reason: "Use `votesForSurvey` instead.")
  votesForSurvey(decreaseId: [ID!], increaseId: [ID!]): Status!
}

type NewsItem {
  address: Address
  author: String
  categories: [Category!]
  charactersToBeShown: String
  contentBlocks: [ContentBlock!]
  createdAt: String
  dataProvider: DataProvider
  externalId: String
  fullVersion: Boolean
  id: ID
  newsType: String
  publicationDate: String
  publishedAt: String
  pushNotificationsSentAt: String
  settings: Setting
  showPublishDate: Boolean
  sourceUrl: WebUrl
  title: String
  updatedAt: String
  visible: Boolean
}

enum NewsItemsOrder {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OpenWeatherMap {
  alerts: [JSON!]
  createdAt: String
  current: JSON
  daily: [JSON!]
  hourly: [JSON!]
  id: ID
  lat: Float
  lon: Float
  updatedAt: String
}

enum OpenWeatherMapsOrder {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OpeningHour {
  dateFrom: String
  dateTo: String
  description: String
  id: ID
  open: Boolean
  sortNumber: Int
  timeFrom: String
  timeTo: String
  weekday: String
}

input OpeningHourInput {
  dateFrom: String
  dateTo: String
  description: String
  open: Boolean
  sortNumber: Int
  timeFrom: String
  timeTo: String
  weekday: String
}

type OperatingCompany {
  address: Address
  contact: Contact
  id: ID
  name: String
}

input OperatingCompanyInput {
  address: AddressInput
  contact: ContactInput
  name: String
}

type PointOfInterest {
  accessibilityInformation: AccessibilityInformation
  active: Boolean
  addresses: [Address!]
  categories: [Category!]
  category: Category
  certificates: [Certificate!]
  contact: Contact
  createdAt: String
  dataProvider: DataProvider
  description: String
  id: ID
  location: Location
  lunches: [Lunch!]
  mediaContents: [MediaContent!]
  mobileDescription: String
  name: String
  openingHours: [OpeningHour!]
  operatingCompany: OperatingCompany
  priceInformations: [Price!]
  settings: Setting
  tagList: [String!]
  updatedAt: String
  visible: Boolean
  webUrls: [WebUrl!]
}

enum PointsOfInterestOrder {
  RAND
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Price {
  ageFrom: Int
  ageTo: Int
  amount: Float
  category: String
  description: String
  groupPrice: Boolean
  id: ID
  maxAdultCount: Int
  maxChildrenCount: Int
  minAdultCount: Int
  minChildrenCount: Int
  name: String
}

input PriceInput {
  ageFrom: Int
  ageTo: Int
  amount: AnyPrimitive
  category: String
  description: String
  groupPrice: Boolean
  maxAdultCount: Int
  maxChildrenCount: Int
  minAdultCount: Int
  minChildrenCount: Int
  name: String
}

type PublicHtmlFile {
  content: String
  name: String
}

type PublicJsonFile {
  content: String!
  name: String!
}

type Query {
  categories: [Category!]!
  categoryTree: JSON!
  directus(query: String): JSON!
  eventRecord(id: ID!): EventRecord!
  eventRecords(categoryId: ID, dataProvider: String, dataProviderId: ID, dateRange: [String], ids: [ID], limit: Int, order: EventRecordsOrder = createdAt_DESC, skip: Int, take: Int): [EventRecord]
  genericItem(id: ID!): GenericItem!
  genericItems(categoryId: ID, dataProvider: String, dataProviderId: ID, externalId: ID, genericType: String, ids: [ID], limit: Int, order: GenericItemOrder = createdAt_DESC, skip: Int): [GenericItem]
  lunch(id: ID!): Lunch!
  lunches(dateRange: [String], ids: [ID], limit: Int, order: LunchesOrder = createdAt_DESC, skip: Int): [Lunch!]!
  newsItem(id: ID!): NewsItem!
  newsItems(categoryId: ID, dataProvider: String, dataProviderId: ID, ids: [ID], limit: Int, order: NewsItemsOrder = publishedAt_DESC, skip: Int): [NewsItem]
  newsItemsDataProviders(categoryId: ID): [DataProvider!]!
  pointOfInterest(id: ID!): PointOfInterest!
  pointsOfInterest(category: String, categoryId: ID, dataProvider: String, dataProviderId: ID, ids: [ID], limit: Int, order: PointsOfInterestOrder = createdAt_DESC, skip: Int): [PointOfInterest]
  publicHtmlFile(name: String!): PublicHtmlFile!
  publicJsonFile(name: String!): PublicJsonFile!
  surveyComments(surveyId: ID): [SurveyComment!]!
  surveys(archived: Boolean, ids: [ID], ongoing: Boolean): [SurveyPoll!]!
  tour(id: ID!): Tour!
  tours(category: String, categoryId: ID, dataProvider: String, dataProviderId: ID, ids: [ID], limit: Int, order: ToursOrder = createdAt_DESC, skip: Int): [Tour!]!
  wasteAddresses(ids: [ID], limit: Int, order: WasteLocationOrder = createdAt_DESC, skip: Int): [Address!]!
  wasteLocationType(id: ID!): WasteLocationType!
  wasteLocationTypes: [WasteLocationType!]!
  weatherMap(id: ID): OpenWeatherMap!
  weatherMaps(ids: [ID], limit: Int, order: OpenWeatherMapsOrder = createdAt_DESC, skip: Int): [OpenWeatherMap]
}

type Region {
  id: ID
  name: String
}

input RegionInput {
  name: String
}

type RepeatDuration {
  endDate: String
  everyYear: Boolean
  id: ID
  startDate: String
}

input RepeatDurationInput {
  endDate: String
  everyYear: Boolean
  startDate: String
}

type Setting {
  alwaysRecreateOnImport: String
  displayOnlySummary: String
  onlySummaryLinkText: String
}

type Status {
  id: ID
  status: String
  statusCode: Int
}

type SurveyComment {
  createdAt: String
  id: ID
  message: String
  surveyPollId: ID
  visible: Boolean
}

type SurveyPoll {
  canComment: Boolean
  createdAt: String
  dataProvider: DataProvider
  date: Date
  description: I18nJSON
  id: ID
  isMultilingual: Boolean
  questionAllowMultipleResponses: Boolean
  questionId: ID
  questionTitle: I18nJSON
  responseOptions: [SurveyResponseOptions!]
  surveyComments: [SurveyComment!]
  title: I18nJSON
  updatedAt: String
  visible: Boolean
}

type SurveyResponseOptions {
  createdAt: String
  id: ID
  title: I18nJSON
  updatedAt: String
  votesCount: Int
}

type Tour {
  active: Boolean
  addresses: [Address!]
  categories: [Category!]
  category: Category
  certificates: [Certificate!]
  contact: Contact
  createdAt: String
  dataProvider: DataProvider
  description: String
  geometryTourData: [GeoLocation!]!
  id: ID
  lengthKm: Int
  meansOfTransportation: String
  mediaContents: [MediaContent!]
  mobileDescription: String
  name: String
  operatingCompany: OperatingCompany
  regions: [Region!]
  settings: Setting
  tags: String
  updatedAt: String
  visible: Boolean
  webUrls: [WebUrl!]
}

enum ToursOrder {
  RAND
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum WasteLocationOrder {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WasteLocationType {
  address: Address
  addressId: Int
  createdAt: String
  id: ID
  listPickUpDates: [String!]
  pickUpTimes: [WastePickUpTime!]
  updatedAt: String
  wasteType: String
}

input WasteLocationTypeInput {
  address: AddressInput
  addressId: Int
  wasteType: String
}

type WastePickUpTime {
  createdAt: String
  id: ID
  pickupDate: String
  updatedAt: String
  wasteLocationType: WasteLocationType
  wasteLocationTypeId: ID
}

type WebUrl {
  description: String
  id: ID
  url: String
}

input WebUrlInput {
  description: String
  url: String
}